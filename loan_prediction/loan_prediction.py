# -*- coding: utf-8 -*-
"""Loan_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P1YYmsWOBTZw5XS39kDwadm38SqhcrCx
"""

# Commented out IPython magic to ensure Python compatibility.
#importing libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

"""Loading training data"""

train = pd.read_csv('/content/train_u6lujuX_CVtuZ9i.csv')
train.head()

"""Loading testing data"""

test = pd.read_csv('/content/test_Y3wMUE5_7gLdaTN.csv')
test.head()

train_original=train.copy()
test_original=test.copy()

"""To check number of columns in train and testing data set"""

train.columns

test.columns

train.shape

test.shape

train['Loan_Status'].value_counts()

"""Dependent Variable Data Visualization"""

train['Loan_Status'].value_counts().plot.bar()

"""Indepdent Vairable(Categorical) Data Visualization"""

train['Gender'].value_counts().plot.bar(figsize=(20,10), title='Gender')
plt.show()

train['Married'].value_counts().plot.bar(title='Married')
plt.show()

train['Self_Employed'].value_counts().plot.bar(title='Self_Employed')
plt.show()

train['Credit_History'].value_counts().plot.bar(title='Credit_History')
plt.show()

train['Credit_History'].value_counts(normalize=True).plot.bar(title='Credit_History')
plt.show()

"""Independent Variable(Ordinal) DataVisualization"""

train['Dependents'].value_counts().plot.bar(figsize=(24,6), title='Dependents')
plt.show()

train['Education'].value_counts().plot.bar(title='Education')
plt.show()

train['Property_Area'].value_counts().plot.bar(title='Property_Area')
plt.show()

"""Independent Variable(Numerical) Data Visualization"""

sns.distplot(train['ApplicantIncome'])
plt.show()

train['ApplicantIncome'].plot.box(figsize=(16,5))
plt.show()

"""Segratting ApplicantIncome based on Education level"""

train.boxplot(column='ApplicantIncome', by = 'Education')
plt.suptitle("")

sns.distplot(train['CoapplicantIncome'])
plt.show()

train['CoapplicantIncome'].plot.box(figsize=(16,5))
plt.show()

sns.distplot(train['LoanAmount'])
plt.show()

train['LoanAmount'].plot.box(figsize=(16,5))
plt.show()

"""Bivariate Analysis of the Data set

Relationship betweenCategorical Independent Variable and Dependent Variable
"""

G=pd.crosstab(train['Gender'],train['Loan_Status'])
G.div(G.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()

M=pd.crosstab(train['Married'],train['Loan_Status'])
M.div(M.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()

D=pd.crosstab(train['Dependents'],train['Loan_Status'])
D.div(D.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()

E=pd.crosstab(train['Education'],train['Loan_Status'])
E.div(E.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()

S_E=pd.crosstab(train['Self_Employed'],train['Loan_Status'])
S_E.div(S_E.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()

"""Relationship between Categorical Independent Varaible and Dependent Variable of Data set"""

C_H=pd.crosstab(train['Credit_History'],train['Loan_Status'])
C_H.div(C_H.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True,figsize=(4,4))
plt.show()

P_A=pd.crosstab(train['Property_Area'],train['Loan_Status'])
P_A.div(P_A.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True)
plt.show()

"""Relationship between Numerical Independent Varaible and Dependent Variable of Data set"""

train.groupby('Loan_Status')['ApplicantIncome'].mean().plot.bar()

bins=[0,2500,4000,6000,81000]
group=['Low','Average','High','Very high']
train['Income_bin']=pd.cut(train['ApplicantIncome'],bins,labels=group)
Income_bin=pd.crosstab(train['Income_bin'],train['Loan_Status'])
Income_bin.div(Income_bin.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True)
plt.xlabel('ApplicantIncome')
P=plt.ylabel('Percentage')

bins=[0,1000,3000,42000]
group=['Low','Average','High']
train['Coapplicant_Income_bin']=pd.cut(train['CoapplicantIncome'],bins,labels=group)
Coapplicant_Income_bin=pd.crosstab(train['Coapplicant_Income_bin'],train['Loan_Status'])
Coapplicant_Income_bin.div(Coapplicant_Income_bin.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True)
plt.xlabel('CoapplicantIncome')
P=plt.ylabel('Percentage')

train['Total_Income']=train['ApplicantIncome']+train['CoapplicantIncome']
bins=[0,2500,4000,6000,81000]
group=['Low','Average','High','Very high']
train['Total_Income_bin']=pd.cut(train['Total_Income'],bins,labels=group)
Total_Income_bin=pd.crosstab(train['Total_Income_bin'],train['Loan_Status'])
Total_Income_bin.div(Total_Income_bin.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True)
plt.xlabel('Total_Income')
P=plt.ylabel('Percentage')

"""Visualization of Depenedent Vairable"""

bins=[0,100,200,700]
group=['Low','Average','High']
train['LoanAmount_bin']=pd.cut(train['LoanAmount'],bins,labels=group)
LoanAmount_bin=pd.crosstab(train['LoanAmount_bin'],train['Loan_Status'])
LoanAmount_bin.div(LoanAmount_bin.sum(1).astype(float), axis=0).plot(kind="bar",stacked=True)
plt.xlabel('LoanAmount')
P=plt.ylabel('Percentage')

matrix = train.corr()
f, ax = plt.subplots(figsize=(9,6))
sns.heatmap(matrix,vmax=.8,square=True,cmap="BuPu", annot = True)

"""Finding Missing Values

"""

train.isnull().sum()

"""Missing Values are Handled through:
*   For numerical variables: imputation using mean or median
*   For categorical variables: imputation using mode






"""

train['Gender'].fillna(train['Gender'].mode()[0], inplace=True)
train['Married'].fillna(train['Married'].mode()[0], inplace=True)
train['Dependents'].fillna(train['Dependents'].mode()[0], inplace=True)
train['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace=True)
train['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace=True)

"""Finding the count of Dependent Vairable Loan_Status"""

train['Loan_Amount_Term'].value_counts()

train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0], inplace=True)

train['LoanAmount'].fillna(train['LoanAmount'].median(), inplace=True)

"""Re-checking if there are any null values in the data after filling missing values with mean,median and mode"""

train.isnull().sum()

"""Filling Missing Values in Test Data set"""

test['Gender'].fillna(train['Gender'].mode()[0], inplace=True)
test['Married'].fillna(train['Married'].mode()[0], inplace=True)
test['Dependents'].fillna(train['Dependents'].mode()[0], inplace=True)
test['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace=True)
test['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace=True)
test['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0], inplace=True)
test['LoanAmount'].fillna(train['LoanAmount'].median(), inplace=True)

"""Model Building using Logistic Regression"""

train=train.drop('Loan_ID',axis=1)
test=test.drop('Loan_ID',axis=1)

X = train.drop('Loan_Status',1)
y = train.Loan_Status

X = pd.get_dummies(X)
train=pd.get_dummies(train)
test=pd.get_dummies(test)

"""Splitting of the data into training and testing sets"""

from sklearn.model_selection import train_test_split
x_train, x_cv, y_train, y_cv = train_test_split(X,y, test_size=0.3)

"""Model Creation"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
model = LogisticRegression()
model.fit(x_train, y_train)

"""Accuracy of the Predicted Model"""

pred_cv = model.predict(x_cv)
accuracy_score(y_cv,pred_cv)

"""Feature Engineering"""

train['Total_Income']=train['ApplicantIncome']+train['CoapplicantIncome']
test['Total_Income']=test['ApplicantIncome']+test['CoapplicantIncome']

sns.distplot(train['Total_Income'])

train['Total_Income_log'] = np.log(train['Total_Income'])
sns.distplot(train['Total_Income_log'])
test['Total_Income_log'] = np.log(test['Total_Income'])

"""Creation of a new feature named EMI"""

train['EMI']=train['LoanAmount']/train['Loan_Amount_Term']
test['EMI']=test['LoanAmount']/test['Loan_Amount_Term']

sns.distplot(train['EMI'])

"""Creation of a new feature named Balance Income"""

train['Balance Income'] = train['Total_Income']-(train['EMI']*1000)
test['Balance Income'] = test['Total_Income']-(test['EMI']*1000)
sns.distplot(train['Balance Income'])

